{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introducci\u00f3n","text":"<p> En este espacio se presentan algunos apuntes del m\u00f3dulo de Sistemas en Big Data en el Curso de espacializaci\u00f3n de Inteligencia Artificial y Big Data que se imparte en el I.E.S. Lluis Simarro de X\u00e0tiva. </p> <ul> <li>Elaboraci\u00f3n: Alberto Aparicio Vila </li> <li>Colaboraci\u00f3n: Jorge Soro Domenech  </li> </ul> <p>Dpto. Inform\u00e1tica I.E.S. Dr. Lluis Simarro Lacabra X\u00e0tiva</p> <p>Fuentes utilizadas</p> <p>Las principales fuentes consultadas para la realizaci\u00f3n de esta secci\u00f3n han sido:</p> <ul> <li>Aitor Medrano. Cursos Inteligencia Artificial y Big Data. Almacen de datos NoSQL</li> <li>Next Generation Databases: NoSQL, NewSQL, and Big Data</li> <li>NoSQL Distilled: A Brief Guide to the Emerging World of Polyglot Persistence</li> <li>Row vs Column Oriented Databases</li> <li>Understanding Database Sharding</li> </ul> <p>Made with Material for MkDocs</p>"},{"location":"mongodb/mongodb/","title":"MongoDB","text":""},{"location":"nosql/nosql/","title":"Almacenamiento de datos. NoSQL","text":""},{"location":"nosql/nosql/#almacenamiento-de-datos","title":"Almacenamiento de datos","text":"<p>Se puede decir que estamos en la tercera plataforma tercera plataforma del almacenamiento de datos. La primera lleg\u00f3 con los primeros computadores y se materializ\u00f3 en las bases de datos jer\u00e1rquicas y en red, as\u00ed como en el almacenamiento ISAM. La segunda vino de la mano de Internet y las arquitecturas cliente-servidor, lo que dio lugar a las bases de datos relacionales.</p> <p>La tercera se ve motivada por el Big Data, los dispositivos m\u00f3viles, las arquitecturas cloud, las redes de IoT y las tecnolog\u00edas/redes sociales. Es tal el volumen de datos que se genera que aparecen nuevos paradigmas como NoSQL, NewSQL y las plataformas de Big Data. En esta sesi\u00f3n nos vamos a centrar en NoSQL.</p> <p>NoSQL aparece como una necesidad debida al creciente volumen de datos sobre usuarios, objetos y productos que las empresas tienen que almacenar, as\u00ed como la frecuencia con la que se accede a los datos. Los SGDB relacionales existentes no fueron dise\u00f1ados teniendo en cuenta la escalabilidad ni la flexibilidad necesaria por las frecuentes modificaciones que necesitan las aplicaciones modernas; tampoco aprovechan que el almacenamiento a d\u00eda de hoy es muy barato, ni el nivel de procesamiento que alcanzan las m\u00e1quinas actuales.</p> <p>La soluci\u00f3n es el despliegue de las aplicaciones y sus datos en cl\u00fasteres de servidores, distribuyendo el procesamiento en m\u00faltiples m\u00e1quinas.</p>"},{"location":"nosql/nosql/#no-solo-sql","title":"No Solo SQL","text":""},{"location":"nosql/nosql/#definicion-nosql","title":"Definici\u00f3n NoSQL","text":"<p>Si definimos NoSQL formalmente, podemos decir que se trata de un conjunto de tecnolog\u00edas que permiten el procesamiento r\u00e1pido y eficiente de conjuntos de datos dando la mayor importancia al rendimiento, la fiabilidad y la agilidad.</p> <p>Si nos basamos en el acr\u00f3nimo, el t\u00e9rmino da la sensaci\u00f3n que se refiere a cualquier almac\u00e9n de datos que no sigue un modelo relacional, los datos no son relacionales y por tanto no utilizan SQL como lenguaje de consulta. Realmente implica que el No hace referencia a not only, es decir, que los sistemas NoSQL se centran en sistemas complementarios a los SGBD relacionales, que fijan sus prioridades en la escalabilidad y la disponibilidad en contra de la atomicidad y consistencia de los datos.</p> <p>Es decir, m\u00e1s que sustitutos de los sistemas relacionales, las soluciones NoSQL se plantean como alternativas y complementarias a los sistemas gestores de bases de datos relacionales.</p> <p>ACID</p> <p>Las bases de datos relacionales cumplen las caracter\u00edsticas ACID para ofrecer transaccionalidad sobre los datos:</p> <ul> <li>Atomicidad: las transacciones implican que se realizan todas las operaciones o no se realiza ninguna.</li> <li>Consistencia: la base de datos asegura que los datos pasan de un estado v\u00e1lido o otro tambi\u00e9n.</li> <li>Isolation (Aislamiento): Una transacci\u00f3n no afecta a otras transacciones, de manera que la modificaci\u00f3n de un registro / documento no es visible por otras lecturas hasta que ha finalizado la transacci\u00f3n. Esto implica que ninguna transacci\u00f3n obtiene una versi\u00f3n intermedia de los datos.</li> <li>Durabilidad: La escritura de los datos asegura que una vez finalizada una operaci\u00f3n, los datos no se perder\u00e1n.</li> </ul> <p>Los diferentes tipos de bases de datos NoSQL existentes se pueden agrupar en cuatro categor\u00edas:</p> <ul> <li> <p>Clave-Valor: Los almacenes clave-valor son las bases de datos NoSQL m\u00e1s simples. Cada elemento de la base de datos se almacena con un nombre de atributo (o clave) junto a su valor, a modo de diccionario. Los almacenes m\u00e1s conocidos son Redis, Riak y AWS DynamoDB. Algunos almacenes, como es el caso de Redis, permiten que cada valor tenga un tipo (por ejemplo, integer) lo cual a\u00f1ade funcionalidad extra.</p> </li> <li> <p>Documentales: Cada clave se asocia a una estructura compleja que se conoce como documento. Este puede contener diferentes pares clave-valor, o pares de clave-array o incluso documentos anidados, como en un documento JSON. Los ejemplos m\u00e1s conocidos son MongoDB, CouchDB o Elastic Search.</p> </li> <li> <p>Grafos: Los almacenes de grafos se usan para almacenar informaci\u00f3n sobre redes, como pueden ser conexiones sociales. Los ejemplos m\u00e1s conocidos son Neo4j, Amazon Neptune y ArangoDB.</p> </li> <li> <p>Basados en columnas: Los almacenes basados en columnas como Hypertabla de Google, Apache Cassandra y Apache HBase est\u00e1n optimizados para consultas sobre grandes conjuntos de datos, y almacenan los datos como columnas en vez de como filas.</p> </li> </ul>"},{"location":"nosql/nosql/#caracteristicas-principales","title":"Caracter\u00edsticas principales","text":"<ul> <li>Manejo de vol\u00famenes masivos y datos semi/estructurados  </li> <li>Esquemas din\u00e1micos: a\u00f1adir campos sin migraciones  </li> <li>Escalabilidad horizontal mediante clusters  </li> <li>Cach\u00e9 integrada \u2192 permite consistencia eventual :contentReference[oaicite:9]{index=9}</li> </ul>"},{"location":"nosql/nosql/#esquemas-dinamicos","title":"Esquemas din\u00e1micos","text":"<p>No requieren definici\u00f3n previa del esquema \u2192 \u00e1gil integraci\u00f3n y sin downtime. Posibilidad de definir esquema solo al leer (schema-on-read) :contentReference[oaicite:10]{index=10}</p>"},{"location":"nosql/nosql/#particionado-sharding","title":"Particionado (Sharding)","text":"<ul> <li>Crucial para escalar horizontalmente  </li> <li>Tipos: horizontal (filas) vs vertical (columnas)  </li> <li>En NoSQL, se usa especialmente en clave\u2011valor y documental; columnas pueden usar ambos :contentReference[oaicite:11]{index=11}</li> </ul>"},{"location":"nosql/nosql/#autosharding","title":"Auto\u2011sharding","text":"<p>Distribuci\u00f3n autom\u00e1tica transparente para la aplicaci\u00f3n (por rango, lista, hash) :contentReference[oaicite:12]{index=12}</p>"},{"location":"nosql/nosql/#replicacion","title":"Replicaci\u00f3n","text":"<p>Copia de datos en varios nodos para alta disponibilidad y tolerancia a fallos. - Peer-to-peer: todos escriben, posible inconsistencia temporal :contentReference[oaicite:13]{index=13} - Replicaci\u00f3n + particionado = entorno ideal :contentReference[oaicite:14]{index=14}</p>"},{"location":"nosql/nosql/#implantacion","title":"Implantaci\u00f3n","text":"<p>Proceso t\u00edpico:</p> <ol> <li>Prueba piloto con baja escala (gratuita, open-source)  </li> <li>Escalado tras an\u00e1lisis del crecimiento, modelo de datos, consistencia, APIs, soporte y comunidad :contentReference[oaicite:15]{index=15}</li> </ol>"},{"location":"nosql/nosql/#decision-tecnologica","title":"Decisi\u00f3n tecnol\u00f3gica","text":"<p>Evaluar seg\u00fan:</p> <ul> <li>Modelo de datos (documental, columnar, grafos, clave\u2011valor)  </li> <li>Necesidades de consulta y de \u00edndices secundarios  </li> <li>Consistencia vs disponibilidad  </li> <li>APIs y ecosistema  </li> <li>Comunidad y soporte :contentReference[oaicite:16]{index=16}</li> </ul>"},{"location":"nosql/nosql/#casos-de-uso","title":"Casos de uso","text":"<ul> <li>Aplicaciones web con campos personalizables \u2192 Documental </li> <li>Cach\u00e9 \u2192 Clave\u2011Valor </li> <li>Almacenamiento de metadatos binarios \u2192 Documental o Clave\u2011Valor  </li> <li>Grandes vol\u00famenes, baja consistencia \u2192 Documental o Columnar :contentReference[oaicite:17]{index=17}</li> </ul>"},{"location":"nosql/nosql/#limitaciones","title":"Limitaciones","text":"<ul> <li>Ausencia de est\u00e1ndar \u00fanico  </li> <li>Riesgo en proyectos open\u2011source sin soporte comercial  </li> <li>Interfaces gr\u00e1ficas limitadas  </li> <li>Profesionales con experiencia escasa :contentReference[oaicite:18]{index=18}</li> </ul>"},{"location":"nosql/nosql/#teorema-de-cap","title":"Teorema de CAP","text":"<p>De Brewer (2000): en sistemas distribuidos solo se pueden cumplir dos de tres: - Consistencia - Availability - Partition tolerance :contentReference[oaicite:19]{index=19}</p> <p>Se elige entre CP, AP o CA, pero no los tres.</p>"},{"location":"nosql/nosql/#modelo-base","title":"Modelo BASE","text":"<ul> <li>Basically Available, Soft\u2011state y Eventual consistency  </li> <li>Prioriza disponibilidad y tolerancia a particiones (AP) :contentReference[oaicite:20]{index=20}</li> </ul>"},{"location":"nosql/nosql/#actividades-propuestas","title":"\ud83d\udcdd Actividades propuestas","text":"<ol> <li>\u00bfQu\u00e9 significa el prefijo \u201cNo\u201d en NoSQL?  </li> <li>\u00bfPuede un sistema soportar replicaci\u00f3n y particionado simult\u00e1neamente?  </li> <li>Asignar modelo de datos a escenarios:  </li> <li>Wiki de c\u00f3mics  </li> <li>Informaci\u00f3n acad\u00e9mica de un pa\u00eds  </li> <li>Investigar persistencia pol\u00edglota </li> <li>Clasificar: BigTable, Cassandra, CouchDB, DynamoDB, HBase, MongoDB, Redis, Riak, Voldemort seg\u00fan CAP  </li> <li>Crear presentaci\u00f3n sobre NewSQL, su relaci\u00f3n con NoSQL y ejemplos como CockroachDB o VoltDB</li> </ol> <p>Fuentes utilizadas</p> <p>Las principales fuentes consultadas para la realizaci\u00f3n de esta secci\u00f3n han sido:</p> <ul> <li>Aitor Medrano. Cursos Inteligencia Artificial y Big Data. Almacen de datos NoSQL</li> <li>Next Generation Databases: NoSQL, NewSQL, and Big Data</li> <li>NoSQL Distilled: A Brief Guide to the Emerging World of Polyglot Persistence</li> <li>Row vs Column Oriented Databases</li> <li>Understanding Database Sharding</li> </ul>"}]}